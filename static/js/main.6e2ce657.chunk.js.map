{"version":3,"sources":["Settings/ChangeBackground.js","Settings/ChangeColor.js","DBActions.js","Settings/ChangeSettings.js","Directories/TitleWithInput.js","Directories/Directories.js","App.js","reportWebVitals.js","ErrorBoundary.js","index.js"],"names":["ChangeBackground","props","useState","url","setUrl","className","type","value","onChange","event","target","aria-describedby","onClick","changeBackgroundToUrl","id","ChangeColor","style","display","flexDirection","flexWrap","colors","map","color","changeColorFunc","code","currentColor","background","dbPromise","openDB","upgrade","db","objectStoreNames","contains","dirs","createObjectStore","keyPath","autoIncrement","createIndex","unique","todos","idbKeyval","table","key","get","getAll","val","add","put","delete","clear","ChangeSettings","back_colors","primary_colors","state","primaryColor","backgroundUrl","backgroundColor","clearSettings","bind","changePrimaryColor","changeBackgroundToColor","this","then","primary","getComputedStyle","document","body","getPropertyValue","nullObjSetting","setAndChangeSettings","name","item","newColor","setState","newItem","changeSettingsOpen","width","height","viewBox","fill","xmlns","d","React","Component","TitleWithInput","openInput","setOpenInput","obj","title","setTitle","changeTitle","useEffect","getElementById","focus","onDragStart","dataTransfer","setData","draggable","onBlur","onKeyUp","handleInputKeyUp","deleteObj","Directories","addNewTODO","deleteDir","deleteToDo","onDrop","dir","describe","data","Date","toISOString","dir_id","order","length","updateDirs","splice","findIndex","x","promiseAllNewOrderSetInDb","todo","find","preventDefault","list","promises","push","Promise","all","sort","a","b","getData","target_id","new_id","split","new_todo","setNewOrderInListOfToDos","onDragOver","App","isOpenSettings","changeRootBySettings","settings","root","backgroundImage","documentElement","setProperty","res","filter","animation","setTimeout","setNewSettingsPanelPosition","changeSettingsOpenState","addNewDir","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ErrorBoundary","error","errorInfo","whiteSpace","toString","componentStack","children","ReactDOM","render","StrictMode","console","log"],"mappings":"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","file":"static/js/main.6e2ce657.chunk.js","sourcesContent":["import React, {useState} from \"react\";\r\n\r\nexport default function ChangeBackground(props) {\r\n    const [url, setUrl] = useState('');\r\n\r\n    return (\r\n        <div className=\"p-1\">\r\n            <h4 className=\"mt-1 ml-1\">Сменить фон: </h4>\r\n            <div className=\"input-group\">\r\n                <input type=\"text\" className=\"form-control\"\r\n                       value={url}\r\n                       onChange={event => setUrl(event.target.value)}\r\n                       aria-describedby=\"backgroundInput\"/>\r\n                <div className=\"input-group-append\">\r\n                    <button className=\"btn btn-secondary\"\r\n                            onClick={() => props.changeBackgroundToUrl(url)}\r\n                            type=\"button\" id=\"button-addon2\">Загрузить</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\n\r\nexport default function ChangeColor(props) {\r\n    return (\r\n        <div style={{display: 'flex', flexDirection: 'row', flexWrap: 'wrap'}}>\r\n            {\r\n                props.colors.map(color =>\r\n                    <div key={color.code}\r\n                         onClick={() => props.changeColorFunc(color.code)}\r\n                         className={props.currentColor.value === color.code ?\r\n                             'active-color-card color-card' : 'color-card'}\r\n                         style={{background: color.code}}/>)\r\n            }\r\n        </div>\r\n    )\r\n}","import { openDB } from 'idb';\r\n\r\nexport const dbPromise = openDB('store', 8, {\r\n    upgrade(db) {\r\n        if (!db.objectStoreNames.contains('settings')) {\r\n            let dirs = db.createObjectStore('settings',\r\n                {keyPath: 'id', autoIncrement: true});\r\n            dirs.createIndex('name', 'name', {unique: false});\r\n            dirs.createIndex('value', 'value', {unique: false});\r\n        }\r\n        if (!db.objectStoreNames.contains('dirs')) {\r\n            let dirs = db.createObjectStore('dirs',\r\n                {keyPath: 'id', autoIncrement: true});\r\n            dirs.createIndex('title', 'title', {unique: false});\r\n            dirs.createIndex('order', 'order', {unique: false});\r\n        }\r\n        if (!db.objectStoreNames.contains('todos')) {\r\n            let todos = db.createObjectStore('todos',\r\n                {keyPath: 'id', autoIncrement: true});\r\n            todos.createIndex('title', 'title', {unique: false});\r\n            todos.createIndex('describe', 'describe', {unique: false});\r\n            todos.createIndex('data', 'data', {unique: false});\r\n            todos.createIndex('dir_id', 'dir_id', {unique: false});\r\n            todos.createIndex('order', 'order', {unique: false});\r\n        }\r\n    },\r\n});\r\n\r\nexport const idbKeyval = {\r\n    async get(table, key) {\r\n        return (await dbPromise).get(table, key);\r\n    },\r\n    async getAll(table) {\r\n        return (await dbPromise).getAll(table);\r\n    },\r\n    async add(table,val) {\r\n        return (await dbPromise).add(table, val);\r\n    },\r\n    async set(table, val) {\r\n        return (await dbPromise).put(table, val);\r\n    },\r\n    async delete(table,key) {\r\n        return (await dbPromise).delete(table, key);\r\n    },\r\n    async clear(table) {\r\n        return (await dbPromise).clear(table);\r\n    },\r\n    async keys(table) {\r\n        return (await dbPromise).getAllKeys(table);\r\n    },\r\n};","import React from \"react\";\r\nimport ChangeBackground from \"./ChangeBackground\";\r\nimport ChangeColor from \"./ChangeColor\";\r\nimport {idbKeyval} from \"../DBActions\";\r\n\r\nexport default class ChangeSettings extends React.Component {\r\n    table = 'settings';\r\n\r\n    back_colors = [\r\n        {color: 'Purple', code: 'rgba(162,86,165,0.82)'},\r\n        {color: 'Soft pink', code: '#ce87a4'},\r\n        {color: 'Blue', code: '#808dbf'},\r\n        {color: 'Cyan', code: '#84b8ad'},\r\n        {color: 'Green', code: '#9fc197'},\r\n        {color: 'Orange', code: '#d7c090'},\r\n        {color: 'Peach', code: '#d7ae99'},\r\n        {color: 'Black', code: '#000000'},\r\n    ];\r\n\r\n    primary_colors = [\r\n        {color: 'Red', code: '#a51212'},\r\n        {color: 'Dark purple', code: '#5c0836'},\r\n        {color: 'Blue', code: '#052286'},\r\n        {color: 'Cyan', code: '#085e4e'},\r\n        {color: 'Green', code: '#1a6a09'},\r\n        {color: 'Orange', code: '#db9808'},\r\n        {color: 'Peach', code: '#ac3807'},\r\n        {color: 'Dark', code: '#3b3939'},\r\n    ]\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            primaryColor: props.primaryColor,\r\n            backgroundUrl: props.backgroundUrl,\r\n            backgroundColor: props.backgroundUrl\r\n        }\r\n\r\n        this.clearSettings = this.clearSettings.bind(this);\r\n        this.changePrimaryColor = this.changePrimaryColor.bind(this);\r\n        this.changeBackgroundToUrl = this.changeBackgroundToUrl.bind(this);\r\n        this.changeBackgroundToColor = this.changeBackgroundToColor.bind(this);\r\n    }\r\n\r\n    clearSettings() {\r\n        idbKeyval.clear(this.table).then(() => {\r\n            let style = getComputedStyle(document.body);\r\n            let primary = style.getPropertyValue('--primary');\r\n            const nullObjSetting = {id: -1, value: ''};\r\n            this.props.setAndChangeSettings('backgroundUrl', {...nullObjSetting});\r\n            this.props.setAndChangeSettings('backgroundColor', {...nullObjSetting});\r\n            idbKeyval.add(this.table, {\r\n                name: 'color_primary',\r\n                value: primary\r\n            }).then(item => {\r\n                this.props.changePrimaryColor(item);\r\n            });\r\n        });\r\n    }\r\n\r\n    changePrimaryColor(code) {\r\n        const newColor = {\r\n            id: this.props.primaryColor.id,\r\n            name: 'color_primary',\r\n            value: code\r\n        }\r\n        idbKeyval.set(this.table, newColor).then(id => {\r\n            if (this.props.primaryColor.id !== id) {\r\n                newColor.id = id;\r\n                idbKeyval.delete(this.table, this.props.primaryColor.id)\r\n            }\r\n            this.setState({primaryColor: newColor});\r\n            this.props.changePrimaryColor(newColor);\r\n        });\r\n    }\r\n\r\n    changeBackgroundToUrl(url) {\r\n        const newItem = {\r\n            name: 'url',\r\n            value: url\r\n        };\r\n        idbKeyval.add(this.table, newItem).then(id => {\r\n            newItem.id = id;\r\n            if (this.props.backgroundUrl.id !== -1)\r\n                idbKeyval.delete(this.table, this.props.backgroundUrl.id)\r\n            this.setState({backgroundUrl: newItem});\r\n            if (this.props.backgroundColor.id !== -1) {\r\n                idbKeyval.delete(this.table, this.props.backgroundColor.id);\r\n                this.setState({backgroundColor: {id: -1, value: ''}});\r\n                this.props.setAndChangeSettings('backgroundColor', {id: -1, value: ''});\r\n            }\r\n            this.props.setAndChangeSettings('backgroundUrl', newItem);\r\n        });\r\n    }\r\n\r\n    changeBackgroundToColor(code) {\r\n        const newItem = {\r\n            name: 'color',\r\n            value: code\r\n        };\r\n        idbKeyval.add(this.table, newItem).then(id => {\r\n            newItem.id = id;\r\n            if (this.props.backgroundColor.id !== -1)\r\n                idbKeyval.delete(this.table, this.props.backgroundColor.id)\r\n            this.setState({backgroundColor: newItem});\r\n            if (this.props.backgroundUrl.id !== -1) {\r\n                idbKeyval.delete(this.table, this.props.backgroundUrl.id);\r\n                this.setState({backgroundUrl: {id: -1, value: ''}});\r\n                this.props.setAndChangeSettings('backgroundUrl', {id: -1, value: ''});\r\n            }\r\n            this.props.setAndChangeSettings('backgroundColor', newItem);\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <button type=\"button\" onClick={() => this.props.changeSettingsOpen()}\r\n                        className=\"btn btn-sm m-1 position-absolute close-settings-btn\">\r\n                    <svg width=\"1.5em\" height=\"1.5em\" viewBox=\"0 0 16 16\"\r\n                         className=\"bi bi-x svg-close-settings-btn\" fill=\"currentColor\"\r\n                         xmlns=\"http://www.w3.org/2000/svg\">\r\n                        <path\r\n                            d=\"M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z\"/>\r\n                    </svg>\r\n                </button>\r\n                <div className=\"mt-4\">\r\n                    <ChangeBackground\r\n                        colors={this.colors}\r\n                        changeBackgroundToUrl={this.changeBackgroundToUrl}/>\r\n                    <h4 className=\"mt-1 ml-1\">или выберите цвет: </h4>\r\n                    <ChangeColor\r\n                        currentColor={this.props.backgroundColor}\r\n                        changeColorFunc={this.changeBackgroundToColor}\r\n                        colors={this.back_colors}/>\r\n                </div>\r\n                <h4 className=\"mt-1 ml-1\">Сменить цвет кнопок: </h4>\r\n                <ChangeColor\r\n                    currentColor={this.props.primaryColor}\r\n                    changeColorFunc={this.changePrimaryColor}\r\n                    colors={this.primary_colors}/>\r\n                <button type=\"button\"\r\n                        className=\"btn btn-outline-primary text-button m-2\"\r\n                        onClick={this.clearSettings}>Очистить стили\r\n                </button>\r\n            </>\r\n        )\r\n    }\r\n}","import React, {useEffect, useState} from \"react\";\r\nimport {idbKeyval} from '../DBActions';\r\n\r\nexport default function TitleWithInput(props) {\r\n    const [openInput, setOpenInput] = useState(false);\r\n    const [title, setTitle] = useState(props.obj.title);\r\n\r\n    function handleInputKeyUp(event) {\r\n        if (event.key === 'Enter') {\r\n            changeTitle();\r\n        }\r\n    }\r\n\r\n    function changeTitle() {\r\n        props.obj.title = title;\r\n        idbKeyval.set(props.table, props.obj).then(() => {\r\n            setOpenInput(false);\r\n            idbKeyval.get(props.table, props.obj.id).then(obj => {\r\n                setTitle(obj.title);\r\n            })\r\n        });\r\n    }\r\n\r\n    function deleteObj() {\r\n        props.deleteObj(props.obj.id);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (document.getElementById(props.id))\r\n            document.getElementById(props.id).focus();\r\n    });\r\n\r\n    function openInputAndFocus() {\r\n        setOpenInput(true);\r\n    }\r\n\r\n    function blurInputAndSave() {\r\n        setOpenInput(false);\r\n        changeTitle();\r\n    }\r\n\r\n    function onDragStart(event, obj) {\r\n        event.dataTransfer.setData('obj', obj.id);\r\n    }\r\n\r\n    return (\r\n        <div className={props.table === 'todos' ? 'todo-card card-border p-1 m-1 draggable' : 'dir-title p-1'}\r\n             id={'div/' + props.id}\r\n             onDragStart={(event) => onDragStart(event, props.obj)}\r\n             draggable={props.table === 'todos'}>\r\n            {\r\n                openInput ?\r\n                    <input id={props.id} type=\"text\"\r\n                           className=\"form-control title-input\"\r\n                           onBlur={() => blurInputAndSave()}\r\n                           onKeyUp={event => handleInputKeyUp(event)}\r\n                           onChange={event => setTitle(event.target.value)}\r\n                           value={title}/>\r\n                    :\r\n                    <div className=\"title-span\" id={'title-span' + props.id}\r\n                         onClick={() => openInputAndFocus()}>{title}</div>\r\n            }\r\n            <div className=\"spacer\"/>\r\n            <button type=\"button\"\r\n                    onClick={() => deleteObj()}\r\n                    className=\"delete-button btn\">\r\n                <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" className=\"bi bi-x\" fill=\"currentColor\"\r\n                     xmlns=\"http://www.w3.org/2000/svg\">\r\n                    <path d=\"M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z\"/>\r\n                </svg>\r\n            </button>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport TitleWithInput from \"./TitleWithInput\";\r\nimport {idbKeyval} from \"../DBActions\";\r\n\r\nexport default class Directories extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.addNewTODO= this.addNewTODO.bind(this);\r\n        this.deleteDir = this.deleteDir.bind(this);\r\n        this.deleteToDo = this.deleteToDo.bind(this);\r\n        this.onDrop = this.onDrop.bind(this);\r\n    }\r\n\r\n    addNewTODO(dir) {\r\n        idbKeyval.add('todos', {\r\n            title: 'New todo',\r\n            describe: 'new',\r\n            data: new Date().toISOString(),\r\n            dir_id: dir.dir.id,\r\n            order: dir.todos.length\r\n        }).then(() => this.props.updateDirs());\r\n    }\r\n\r\n    deleteDir(key) {\r\n        idbKeyval.delete('dirs', key)\r\n            .then(() => {\r\n                this.props.dirs.splice(this.props.dirs.findIndex(x =>x.dir.id === key), 1);\r\n                this.promiseAllNewOrderSetInDb(this.props.dirs, 'dirs');\r\n            });\r\n    }\r\n\r\n    deleteToDo(key) {\r\n        idbKeyval.get('todos', key)\r\n            .then(todo => {\r\n                    let dir = this.props.dirs.find(x => x.dir.id === todo.dir_id);\r\n                    idbKeyval.delete('todos', key)\r\n                        .then(() => {\r\n                            dir.todos.splice(dir.todos.findIndex(x => x.id === todo.id), 1);\r\n                            this.promiseAllNewOrderSetInDb(dir.todos, 'todos');\r\n                        })\r\n                }\r\n            )\r\n    }\r\n\r\n    onDragOver(event) {\r\n        event.preventDefault();\r\n    }\r\n\r\n    promiseAllNewOrderSetInDb(list, table) {\r\n        let order = 0;\r\n        let promises = [];\r\n        for (let val of list) {\r\n            if (table === 'todos') {\r\n                val.order = order;\r\n                promises.push(idbKeyval.set(table, val));\r\n            }\r\n            else {\r\n                val.dir.order = order;\r\n                promises.push(idbKeyval.set(table, val.dir));\r\n            }\r\n            order++;\r\n        }\r\n        Promise.all(\r\n            promises\r\n        )\r\n            .then(() => this.props.updateDirs());\r\n    }\r\n\r\n    setNewOrderInListOfToDos(todo, dir) {\r\n        dir.todos = dir.todos.sort((a,b) => {\r\n            if (a.order < b.order) {\r\n                return -1;\r\n            }\r\n            if (a.order > b.order) {\r\n                return 1;\r\n            }\r\n            if (a.order === b.order) {\r\n                if (a.id === todo.id)\r\n                    return -1;\r\n                else return 1;\r\n            }\r\n\r\n            return 0;\r\n        });\r\n        this.promiseAllNewOrderSetInDb(dir.todos, 'todos');\r\n    }\r\n\r\n    onDrop(event, dir) {\r\n        const id = +event.dataTransfer.getData('obj');\r\n        idbKeyval.get('todos', id).then(todo => {\r\n            if (todo.dir_id !== dir.dir.id) {\r\n                todo.dir_id = dir.dir.id;\r\n                todo.order = dir.todos.length;\r\n                idbKeyval.set('todos', todo)\r\n                    .then(() => this.updateDirs());\r\n            }\r\n            else {\r\n                const target_id = event.target.id;\r\n                if (target_id) {\r\n                    let new_id = +target_id.split(':')[1];\r\n                    if (new_id !== id) {\r\n                        idbKeyval.get('todos', new_id)\r\n                            .then(new_todo => {\r\n                                todo.order = new_todo.order + 1;\r\n                                dir.todos.find(x => x.id === todo.id).order = new_todo.order + 1;\r\n                                this.setNewOrderInListOfToDos(todo, dir);\r\n                            })\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {\r\n                    this.props.dirs.length !== 0 &&\r\n                    this.props.dirs.map(dir =>\r\n                        <div key={dir.dir.id} className=\"directory-card card-border p-2 m-2 droppable\"\r\n                             onDrop={event => this.onDrop(event, dir)}\r\n                             onDragOver={event => this.onDragOver(event)}>\r\n                            <TitleWithInput table=\"dirs\" deleteObj={this.deleteDir}\r\n                                            obj={dir.dir} id={'dirs' + dir.dir.id}/>\r\n                            <div className=\"todos-scroll\">\r\n                                {\r\n                                    dir.todos.map(todo =>\r\n                                        <TitleWithInput table=\"todos\"\r\n                                                        deleteObj={this.deleteToDo}\r\n                                                        key={'todo' + todo.id}\r\n                                                        obj={todo}\r\n                                                        id={'todos/dir' + dir.dir.id + '/todo:' + todo.id}/>\r\n                                    )\r\n                                }\r\n                            </div>\r\n                            <button type=\"button\"\r\n                                    className=\"btn btn-outline-primary text-button m-1\"\r\n                                    onClick={() => this.addNewTODO(dir)}>Добавить\r\n                            </button>\r\n                        </div>\r\n                    )\r\n                }\r\n            </>\r\n        )\r\n    }\r\n}","import React from \"react\";\nimport ChangeSettings from './Settings/ChangeSettings';\nimport {dbPromise, idbKeyval} from './DBActions';\nimport Directories from \"./Directories/Directories\";\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isOpenSettings: false,\n            db: dbPromise,\n            dirs: [],\n            primaryColor: {id: -1, value: ''},\n            backgroundUrl: {id: -1, value: ''},\n            backgroundColor: {id: -1, value: ''}\n        };\n\n        this.updateDirs = this.updateDirs.bind(this);\n        this.clear = this.clear.bind(this);\n        this.setAndChangeSettings = this.setAndChangeSettings.bind(this);\n        this.changeRootBySettings = this.changeRootBySettings.bind(this);\n        this.changePrimaryColor = this.changePrimaryColor.bind(this);\n    }\n\n    componentDidMount() {\n        this.updateDirs();\n        idbKeyval.getAll('settings').then(settings => {\n            for (let item of settings) {\n                if (item.name === 'url') {\n                    this.setAndChangeSettings('backgroundUrl', item);\n                }\n                if (item.name === 'color') {\n                    this.setAndChangeSettings('backgroundColor', item);\n                }\n                if (item.name === 'color_primary') {\n                    this.changePrimaryColor(item);\n                }\n            }\n            this.changeRootBySettings();\n        });\n    }\n\n    setAndChangeSettings(name, value) {\n        this.setState({[name]: value}, () => {\n            this.changeRootBySettings();\n        })\n    }\n\n    changeRootBySettings() {\n        const root = document.getElementById('root');\n        root.style.backgroundImage = 'none';\n        root.style.background = 'none';\n        if (this.state.backgroundColor.id !== -1) {\n            root.style.background = this.state.backgroundColor.value;\n        }\n        if (this.state.backgroundUrl.id !== -1) {\n            root.style.backgroundImage = `url(${this.state.backgroundUrl.value})`;\n        }\n    }\n\n    changePrimaryColor(item) {\n        this.setState({primaryColor: item}, () =>\n            document.documentElement.style.setProperty('--primary-color',\n                this.state.primaryColor.value)\n        );\n    }\n\n    updateDirs() {\n        idbKeyval.getAll('dirs').then(dirs => {\n            idbKeyval.getAll('todos').then(todos => {\n                let res = [];\n                for (let dir of dirs) {\n                    res.push({\n                        dir: dir,\n                        todos: todos.filter(x =>\n                            x.dir_id === dir.id).sort((a, b) => a.order - b.order)\n                    })\n                }\n                res.sort((a, b) => a.order - b.order);\n                this.setState({dirs: res});\n            })\n        });\n    }\n\n    addNewDir() {\n        idbKeyval.add('dirs', {\n            title: 'New list',\n            order: this.state.dirs.length\n        })\n            .then(() => this.updateDirs());\n    }\n\n    clear() {\n        idbKeyval.clear('todos').then(() =>\n            idbKeyval.clear('dirs').then(() => this.updateDirs()));\n    }\n\n    setNewSettingsPanelPosition() {\n        this.setState(state => ({\n            isOpenSettings: !state.isOpenSettings\n        }), () => {\n            if (this.state.isOpenSettings) {\n                const settingsPanel = document.getElementById('settings');\n                settingsPanel.style.animation = 'open-settings-panel 1s';\n            }\n        })\n    }\n\n    changeSettingsOpenState() {\n        if (this.state.isOpenSettings) {\n            const settingsPanel = document.getElementById('settings');\n            settingsPanel.style.animation = 'close-settings-panel 1s';\n            setTimeout(() => this.setNewSettingsPanelPosition(), 1000);\n        } else this.setNewSettingsPanelPosition();\n    }\n\n    render() {\n        return (\n            <div className=\"container-xl\">\n                {\n                    this.state.isOpenSettings &&\n                    <div id=\"settings\" className=\"settings-panel position-absolute\">\n                        <ChangeSettings\n                            primaryColor={this.state.primaryColor}\n                            backgroundColor={this.state.backgroundColor}\n                            backgroundUrl={this.state.backgroundUrl}\n                            changePrimaryColor={this.changePrimaryColor}\n                            setAndChangeSettings={this.setAndChangeSettings}\n                            changeSettingsOpen={() => this.changeSettingsOpenState()}/>\n                    </div>\n                }\n                <div>\n                    <div className=\"row\">\n                        <button type=\"button\"\n                                className=\"btn btn-outline-primary text-button m-2\"\n                                onClick={() => this.addNewDir()}>Новый список\n                        </button>\n                        <button type=\"button\"\n                                className=\"btn btn-outline-primary text-button m-2\"\n                                onClick={() => this.clear()}>Очистить все\n                        </button>\n                        <div className=\"spacer\"/>\n                        <button type=\"button\" onClick={() => this.changeSettingsOpenState()}\n                                className=\"btn btn-outline-primary text-button m-2\">\n                            <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" className=\"bi bi-toggles\">\n                                <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" className=\"bi bi-toggles\"\n                                     fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n                                    <path\n                                        d=\"M4.5 9a3.5 3.5 0 1 0 0 7h7a3.5 3.5 0 1 0 0-7h-7zm7 6a2.5 2.5 0 1 0 0-5 2.5 2.5 0 0 0 0 5zm-7-14a2.5 2.5 0 1 0 0 5 2.5 2.5 0 0 0 0-5zm2.45 0A3.49 3.49 0 0 1 8 3.5 3.49 3.49 0 0 1 6.95 6h4.55a2.5 2.5 0 0 0 0-5H6.95zM4.5 0h7a3.5 3.5 0 1 1 0 7h-7a3.5 3.5 0 1 1 0-7z\"/>\n                                </svg>\n                            </svg>\n                        </button>\n                    </div>\n                    <div className=\"row directories-scroll\">\n                        <Directories\n                            updateDirs={this.updateDirs}\n                            dirs={this.state.dirs}/>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\r\n\r\nexport default class ErrorBoundary extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { error: null, errorInfo: null };\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        // Catch errors in any components below and re-render with error message\r\n        this.setState({\r\n            error: error,\r\n            errorInfo: errorInfo\r\n        })\r\n        // You can also log error messages to an error reporting service here\r\n    }\r\n\r\n    render() {\r\n        if (this.state.errorInfo) {\r\n            // Error path\r\n            return (\r\n                <div>\r\n                    <h2>Something went wrong.</h2>\r\n                    <details style={{ whiteSpace: 'pre-wrap' }}>\r\n                        {this.state.error && this.state.error.toString()}\r\n                        <br />\r\n                        {this.state.errorInfo.componentStack}\r\n                    </details>\r\n                </div>\r\n            );\r\n        }\r\n        // Normally, just render children\r\n        return this.props.children;\r\n    }\r\n}","import './custom.scss';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport ErrorBoundary from './ErrorBoundary';\n\nReactDOM.render(\n    <React.StrictMode>\n        <ErrorBoundary>\n            <App />\n        </ErrorBoundary>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n"],"sourceRoot":""}