{"version":3,"sources":["Settings/ChangeBackground.js","Settings/ChangeSettings.js","DBActions.js","Directories/TitleWithInput.js","Directories/Directories.js","App.js","reportWebVitals.js","ErrorBoundary.js","index.js"],"names":["ChangeBackground","props","useState","url","setUrl","color","code","currentColor","setColor","className","type","value","onChange","event","target","aria-describedby","onClick","changeBackground","id","style","display","flexDirection","flexWrap","map","background","ChangeSettings","changeSettingsOpen","width","height","viewBox","fill","xmlns","fill-rule","d","dbPromise","openDB","upgrade","db","objectStoreNames","contains","createObjectStore","keyPath","autoIncrement","createIndex","unique","dirs","todos","idbKeyval","table","key","get","getAll","val","add","put","delete","clear","TitleWithInput","openInput","setOpenInput","obj","title","setTitle","changeTitle","then","useEffect","document","getElementById","focus","onDragStart","dataTransfer","setData","draggable","onBlur","onKeyUp","handleInputKeyUp","deleteObj","Directories","length","dir","onDrop","onDragOver","deleteDir","todo","deleteTodo","addNewTODO","App","state","isOpenSettings","background_url","background_color","bind","deleteToDo","this","updateDirs","settings","item","name","setState","changeStyleRoot","res","push","filter","x","dir_id","sort","a","b","order","describe","data","Date","toISOString","animation","setTimeout","setNewSettingsPanelPosition","root","backgroundImage","new_url","Object","changeSettingsOpenState","preventDefault","getData","target_id","new_id","split","new_todo","find","promises","Promise","all","addNewDir","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ErrorBoundary","error","errorInfo","whiteSpace","toString","componentStack","children","ReactDOM","render","StrictMode","console","log"],"mappings":"gRAEe,SAASA,EAAiBC,GAAQ,IAAD,EACtBC,mBAAS,IADa,mBACrCC,EADqC,KAChCC,EADgC,OAEXF,mBAAS,CACtCG,MAAO,GAAIC,KAAM,KAHuB,mBAErCC,EAFqC,KAEvBC,EAFuB,KAkB5C,OACI,sBAAKC,UAAU,MAAf,UACI,oBAAIA,UAAU,YAAd,6EACA,sBAAKA,UAAU,cAAf,UACI,uBAAOC,KAAK,OAAOD,UAAU,eACtBE,MAAOR,EACPS,SAAU,SAAAC,GAAK,OAAIT,EAAOS,EAAMC,OAAOH,QACvCI,mBAAiB,oBACxB,qBAAKN,UAAU,qBAAf,SACI,wBAAQA,UAAU,oBACVO,QAAS,kBAAMf,EAAMgB,iBAAiBd,IACtCO,KAAK,SAASQ,GAAG,gBAFzB,uBAKR,oBAAIT,UAAU,YAAd,4GACA,qBAAKU,MAAO,CAACC,QAAS,OAAQC,cAAe,MAAOC,SAAU,QAA9D,SA3BO,CACX,CAACjB,MAAO,YAAaC,KAAM,WAC3B,CAACD,MAAO,OAAQC,KAAM,WACtB,CAACD,MAAO,SAAUC,KAAM,WACxB,CAACD,MAAO,QAASC,KAAM,WACvB,CAACD,MAAO,SAAUC,KAAM,YAwBLiB,KAAI,SAAAlB,GAAK,OACZ,qBACKW,QAAS,WACLR,EAASH,GACTJ,EAAMgB,iBAAiBZ,IAC3BI,UAAWF,EAAaD,OAASD,EAAMC,KACnC,+BAAiC,aACrCa,MAAO,CAACK,WAAYnB,EAAMC,OANrBD,EAAMC,cCnCzB,SAASmB,EAAexB,GACnC,OACI,qCACI,wBAAQS,KAAK,SAASM,QAAS,kBAAMf,EAAMyB,sBACnCjB,UAAU,sDADlB,SAEI,qBAAKkB,MAAM,QAAQC,OAAO,QAAQC,QAAQ,YACrCpB,UAAU,iCAAiCqB,KAAK,eAChDC,MAAM,6BAFX,SAGI,sBAAMC,YAAU,UACVC,EAAE,wMAGhB,qBAAKxB,UAAU,OAAf,SACI,cAACT,EAAD,CACIiB,iBAAkBhB,EAAMgB,wB,YCf/BiB,EAAYC,YAAO,QAAS,EAAG,CACxCC,QADwC,SAChCC,GACCA,EAAGC,iBAAiBC,SAAS,aACnBF,EAAGG,kBAAkB,WAC5B,CAACC,QAAS,OAAQC,eAAe,IAChCC,YAAY,QAAS,QAAS,CAACC,QAAQ,IAEhD,IAAKP,EAAGC,iBAAiBC,SAAS,QAAS,CACvC,IAAIM,EAAOR,EAAGG,kBAAkB,OAC5B,CAACC,QAAS,KAAMC,eAAe,IACnCG,EAAKF,YAAY,QAAS,QAAS,CAACC,QAAQ,IAC5CC,EAAKF,YAAY,QAAS,QAAS,CAACC,QAAQ,IAEhD,IAAKP,EAAGC,iBAAiBC,SAAS,SAAU,CACxC,IAAIO,EAAQT,EAAGG,kBAAkB,QAC7B,CAACC,QAAS,KAAMC,eAAe,IACnCI,EAAMH,YAAY,QAAS,QAAS,CAACC,QAAQ,IAC7CE,EAAMH,YAAY,WAAY,WAAY,CAACC,QAAQ,IACnDE,EAAMH,YAAY,OAAQ,OAAQ,CAACC,QAAQ,IAC3CE,EAAMH,YAAY,SAAU,SAAU,CAACC,QAAQ,IAC/CE,EAAMH,YAAY,QAAS,QAAS,CAACC,QAAQ,QAK5CG,EAAY,SACXC,EAAOC,GAAM,OAAD,oHACJf,EADI,uCACOgB,IAAIF,EAAOC,IADlB,8CADbF,EAAY,SAIRC,GAAQ,OAAD,oHACFd,EADE,uCACSiB,OAAOH,IADhB,8CAJXD,EAAY,SAOXC,EAAMI,GAAM,OAAD,oHACHlB,EADG,uCACQmB,IAAIL,EAAOI,IADnB,8CAPZL,EAAY,SAUXC,EAAOI,GAAM,OAAD,oHACJlB,EADI,uCACOoB,IAAIN,EAAOI,IADlB,8CAVbL,EAAY,SAaRC,EAAMC,GAAM,OAAD,oHACNf,EADM,uCACKqB,OAAOP,EAAOC,IADnB,8CAbfF,EAAY,SAgBTC,GAAQ,OAAD,oHACDd,EADC,uCACUsB,MAAMR,IADhB,8CCxCR,SAASS,EAAexD,GAAQ,IAAD,EACRC,oBAAS,GADD,mBACnCwD,EADmC,KACxBC,EADwB,OAEhBzD,mBAASD,EAAM2D,IAAIC,OAFH,mBAEnCA,EAFmC,KAE5BC,EAF4B,KAU1C,SAASC,IACL9D,EAAM2D,IAAIC,MAAQA,EAClBd,EAAc9C,EAAM+C,MAAO/C,EAAM2D,KAAKI,MAAK,WACvCL,GAAa,GACbZ,EAAc9C,EAAM+C,MAAO/C,EAAM2D,IAAI1C,IAAI8C,MAAK,SAAAJ,GAC1CE,EAASF,EAAIC,aA2BzB,OAlBAI,qBAAU,WACFC,SAASC,eAAelE,EAAMiB,KAC9BgD,SAASC,eAAelE,EAAMiB,IAAIkD,WAiBtC,sBAAK3D,UAA2B,UAAhBR,EAAM+C,MAAoB,8BAAgC,gBACrE9B,GAAI,OAASjB,EAAMiB,GACnBmD,YAAa,SAACxD,GAAD,OAPtB,SAAqBA,EAAO+C,GACxB/C,EAAMyD,aAAaC,QAAQ,MAAOX,EAAI1C,IAMTmD,CAAYxD,EAAOZ,EAAM2D,MACjDY,UAA2B,UAAhBvE,EAAM+C,MAHtB,UAKQU,EACI,uBAAOxC,GAAIjB,EAAMiB,GAAIR,KAAK,OACnBD,UAAU,2BACVgE,OAAQ,kBAjB3Bd,GAAa,QACbI,KAiBmBW,QAAS,SAAA7D,GAAK,OAhDrC,SAA0BA,GACJ,UAAdA,EAAMoC,KACNc,IA8CiCY,CAAiB9D,IACnCD,SAAU,SAAAC,GAAK,OAAIiD,EAASjD,EAAMC,OAAOH,QACzCA,MAAOkD,IAEd,qBAAKpD,UAAU,aAAaS,GAAI,aAAejB,EAAMiB,GAChDF,QAAS,WA3B1B2C,GAAa,IA0BD,SAC0CE,IAElD,qBAAKpD,UAAU,WACf,wBAAQC,KAAK,SACLM,QAAS,WAxCrBf,EAAM2E,UAAU3E,EAAM2D,IAAI1C,KAyCdT,UAAU,oBAFlB,SAGI,qBAAKkB,MAAM,MAAMC,OAAO,MAAMC,QAAQ,YAAYpB,UAAU,UAAUqB,KAAK,eACtEC,MAAM,6BADX,SAEI,sBAAME,EAAE,2MCjEb,SAAS4C,EAAY5E,GAChC,OACI,mCAE8B,IAAtBA,EAAM4C,KAAKiC,QACX7E,EAAM4C,KAAKtB,KAAI,SAAAwD,GAAG,OACd,sBAAsBtE,UAAU,mCAC3BuE,OAAQ,SAAAnE,GAAK,OAAIZ,EAAM+E,OAAOnE,EAAOkE,IACrCE,WAAY,SAAApE,GAAK,OAAIZ,EAAMgF,WAAWpE,IAF3C,UAGI,cAAC4C,EAAD,CAAgBT,MAAM,OAAO4B,UAAW3E,EAAMiF,UAC9BtB,IAAKmB,EAAIA,IAAK7D,GAAI,OAAS6D,EAAIA,IAAI7D,KACnD,qBAAKT,UAAU,eAAf,SAEQsE,EAAIjC,MAAMvB,KAAI,SAAA4D,GAAI,OACd,cAAC1B,EAAD,CAAgBT,MAAM,QACN4B,UAAW3E,EAAMmF,WAEjBxB,IAAKuB,EACLjE,GAAI,YAAc6D,EAAIA,IAAI7D,GAAK,SAAWiE,EAAKjE,IAF1C,OAASiE,EAAKjE,SAM/C,wBAAQR,KAAK,SACLD,UAAU,8BACVO,QAAS,kBAAMf,EAAMoF,WAAWN,IAFxC,gEAhBMA,EAAIA,IAAI7D,S,ICsPvBoE,E,kDAzPX,WAAYrF,GAAQ,IAAD,8BACf,cAAMA,IACDsF,MAAQ,CACTC,gBAAgB,EAChBnD,GAAIH,EACJW,KAAM,GACN4C,eAAgB,GAChBC,iBAAkB,IAGtB,EAAKzE,iBAAmB,EAAKA,iBAAiB0E,KAAtB,gBACxB,EAAKN,WAAY,EAAKA,WAAWM,KAAhB,gBACjB,EAAKT,UAAY,EAAKA,UAAUS,KAAf,gBACjB,EAAKC,WAAa,EAAKA,WAAWD,KAAhB,gBAClB,EAAKnC,MAAQ,EAAKA,MAAMmC,KAAX,gBACb,EAAKX,OAAS,EAAKA,OAAOW,KAAZ,gBAfC,E,gEAkBE,IAAD,OAChBE,KAAKC,aACL/C,EAAiB,YAAYiB,MAAK,SAAA+B,GAAa,IAAD,gBACzBA,GADyB,IAC1C,2BAA2B,CAAC,IAAnBC,EAAkB,QACL,QAAdA,EAAKC,MACL,EAAKC,SAAS,CACVT,eAAgBO,EAAKrF,MACrB+E,iBAAkB,KACnB,WACC,EAAKS,qBAGK,UAAdH,EAAKC,MACL,EAAKC,SAAS,CACVT,eAAgB,GAChBC,iBAAkBM,EAAKrF,QACxB,WACC,EAAKwF,sBAfyB,oC,mCAqBpC,IAAD,OACTpD,EAAiB,QAAQiB,MAAK,SAAAnB,GAC1BE,EAAiB,SAASiB,MAAK,SAAAlB,GAC3B,IADoC,EAChCsD,EAAM,GAD0B,cAEpBvD,GAFoB,yBAE3BkC,EAF2B,QAGhCqB,EAAIC,KAAK,CACLtB,IAAKA,EACLjC,MAAOA,EAAMwD,QAAO,SAAAC,GAAC,OACjBA,EAAEC,SAAWzB,EAAI7D,MAAIuF,MAAK,SAACC,EAAEC,GAAH,OAASD,EAAEE,MAAQD,EAAEC,YAJ3D,2BAAuB,IAFa,8BASpCR,EAAIK,MAAK,SAACC,EAAEC,GAAH,OAASD,EAAEE,MAAQD,EAAEC,SAC9B,EAAKV,SAAS,CAACrD,KAAMuD,Y,kCAKpB,IAAD,OACRrD,EAAc,OAAQ,CAClBc,MAAO,WACP+C,MAAOf,KAAKN,MAAM1C,KAAKiC,SAEtBd,MAAK,kBAAM,EAAK8B,kB,iCAGdf,GAAM,IAAD,OACZhC,EAAc,QAAS,CACnBc,MAAO,WACPgD,SAAU,MACVC,MAAM,IAAIC,MAAOC,cACjBR,OAAQzB,EAAIA,IAAI7D,GAChB0F,MAAO7B,EAAIjC,MAAMgC,SAClBd,MAAK,kBAAM,EAAK8B,kB,gCAGb7C,GAAM,IAAD,OACXF,EAAiB,OAAQE,GACpBe,MAAK,kBAAM,EAAK8B,kB,iCAGd7C,GAAM,IAAD,OACZF,EAAiB,QAASE,GACrBe,MAAK,kBAAM,EAAK8B,kB,mJAIrB/C,EAAgB,SAASiB,MAAK,kBAC1BjB,EAAgB,QAAQiB,MAAK,kBAAM,EAAK8B,mB,qJAGjB,IAAD,OAC1BD,KAAKK,UAAS,SAAAX,GAAK,MAAK,CACpBC,gBAAiBD,EAAMC,mBACvB,WACI,EAAKD,MAAMC,iBACWtB,SAASC,eAAe,YAChChD,MAAM8F,UAAY,+B,gDAKjB,IAAD,OAClBpB,KAAKN,MAAMC,gBACWtB,SAASC,eAAe,YAChChD,MAAM8F,UAAY,0BAChCC,YAAW,kBAAM,EAAKC,gCAA+B,MAEpDtB,KAAKsB,gC,wCAIV,IAAMC,EAAOlD,SAASC,eAAe,QACrCiD,EAAKjG,MAAMkG,gBAAkB,OAC7BD,EAAKjG,MAAMK,WAAa,cACpBqE,KAAKN,MAAMG,mBACX0B,EAAKjG,MAAMK,WAAaqE,KAAKN,MAAMG,kBAEnCG,KAAKN,MAAME,iBACX2B,EAAKjG,MAAMkG,gBAAX,cAAoCxB,KAAKN,MAAME,eAA/C,Q,uCAIS6B,GAAU,IAAD,OACtBvE,EAAiB,WAAY,OAC7BA,EAAiB,WAAY,SACzBuE,aAAmBC,QACnB1B,KAAKK,SAAS,CACVT,eAAgB,GAChBC,iBAAkB4B,EAAQhH,OAE9ByC,EAAc,WAAY,CACtBkD,KAAM,QACNtF,MAAO2G,EAAQhH,OAChB0D,MAAK,kBAAM,EAAKmC,uBAGnBN,KAAKK,SAAS,CAACT,eAAgB6B,IAC/BvE,EAAc,WAAY,CACtBkD,KAAM,MACNtF,MAAO2G,IACRtD,MAAK,kBAAM,EAAKmC,qBACnBN,KAAK2B,6B,iCAIF3G,GACPA,EAAM4G,mB,6BAGH5G,EAAOkE,GAAM,IAAD,OACT7D,GAAML,EAAMyD,aAAaoD,QAAQ,OACvC3E,EAAc,QAAS7B,GAAI8C,MAAK,SAAAmB,GAC5B,GAAIA,EAAKqB,SAAWzB,EAAIA,IAAI7D,GACxBiE,EAAKqB,OAASzB,EAAIA,IAAI7D,GACtBiE,EAAKyB,MAAQ7B,EAAIjC,MAAMgC,OACvB/B,EAAc,QAASoC,GAClBnB,MAAK,kBAAM,EAAK8B,oBAEpB,CACD,IAAM6B,EAAY9G,EAAMC,OAAOI,GAC/B,GAAIyG,EAAW,CACX,IAAIC,GAAUD,EAAUE,MAAM,KAAK,GAC/BD,IAAW1G,GACX6B,EAAc,QAAS6E,GAClB5D,MAAK,SAAA8D,GACF,IAAIlB,EAAQ,EACZzB,EAAKyB,MAAQkB,EAASlB,MAAQ,EAC9B7B,EAAIjC,MAAMiF,MAAK,SAAAxB,GAAC,OAAIA,EAAErF,KAAOiE,EAAKjE,MAAI0F,MAAQkB,EAASlB,MAAQ,EAC/D7B,EAAIjC,MAAQiC,EAAIjC,MAAM2D,MAAK,SAACC,EAAEC,GAC1B,OAAID,EAAEE,MAAQD,EAAEC,OACJ,EAERF,EAAEE,MAAQD,EAAEC,MACL,EAEPF,EAAEE,QAAUD,EAAEC,MACVF,EAAExF,KAAOiE,EAAKjE,IACN,EACA,EAGT,KAEX,IAnBc,EAmBV8G,EAAW,GAnBD,cAoBEjD,EAAIjC,OApBN,IAoBd,2BAA2B,CAAC,IAAnBM,EAAkB,QACvBA,EAAIwD,MAAQA,EACZoB,EAAS3B,KAAKtD,EAAc,QAASK,IACrCwD,KAvBU,8BAyBdqB,QAAQC,IACJF,GAEChE,MAAK,kBAAM,EAAK8B,0B,+BAQvC,IAAD,OACL,OACI,qBAAKrF,UAAU,eAAf,SACI,qCAEQoF,KAAKN,MAAMC,gBACX,qBAAKtE,GAAG,WAAWT,UAAU,mCAA7B,SACI,cAACgB,EAAD,CACIR,iBAAkB4E,KAAK5E,iBACvBS,mBAAoB,kBAAM,EAAK8F,+BAG3C,gCACI,sBAAK/G,UAAU,MAAf,UACI,wBAAQC,KAAK,SACLD,UAAU,8BACVO,QAAS,kBAAM,EAAKmH,aAF5B,iFAGA,wBAAQzH,KAAK,SACLD,UAAU,8BACVO,QAAS,kBAAM,EAAKwC,SAF5B,iFAGA,qBAAK/C,UAAU,WACf,wBAAQC,KAAK,SAASM,QAAS,kBAAM,EAAKwG,2BAClC/G,UAAU,8BADlB,SAEI,qBAAKkB,MAAM,MAAMC,OAAO,MAAMC,QAAQ,YAAYpB,UAAU,gBAA5D,SACI,qBAAKkB,MAAM,MAAMC,OAAO,MAAMC,QAAQ,YAAYpB,UAAU,gBACvDqB,KAAK,eAAeC,MAAM,6BAD/B,SAEI,sBAAME,EAAE,mRAKxB,qBAAKxB,UAAU,yBAAf,SACI,cAACoE,EAAD,CACIG,OAAQa,KAAKb,OACbC,WAAYY,KAAKZ,WACjBC,UAAWW,KAAKX,UAChBE,WAAYS,KAAKD,WACjBP,WAAYQ,KAAKR,WACjB7B,MAAOqC,KAAKrC,MACZX,KAAMgD,KAAKN,MAAM1C,qB,GAjP/BuF,IAAMC,WCOTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBxE,MAAK,YAAkD,IAA/CyE,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCLOO,E,kDACjB,WAAY7I,GAAQ,IAAD,8BACf,cAAMA,IACDsF,MAAQ,CAAEwD,MAAO,KAAMC,UAAW,MAFxB,E,8DAKDD,EAAOC,GAErBnD,KAAKK,SAAS,CACV6C,MAAOA,EACPC,UAAWA,M,+BAMf,OAAInD,KAAKN,MAAMyD,UAGP,gCACI,uDACA,0BAAS7H,MAAO,CAAE8H,WAAY,YAA9B,UACKpD,KAAKN,MAAMwD,OAASlD,KAAKN,MAAMwD,MAAMG,WACtC,uBACCrD,KAAKN,MAAMyD,UAAUG,qBAM/BtD,KAAK5F,MAAMmJ,a,GA9BiBhB,IAAMC,WCKjDgB,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,UACI,cAAC,EAAD,QAGRrF,SAASC,eAAe,SAM5BmE,EAAgBkB,QAAQC,O","file":"static/js/main.c1a5b65a.chunk.js","sourcesContent":["import React, {useState} from \"react\";\r\n\r\nexport default function ChangeBackground(props) {\r\n    const [url, setUrl] = useState('');\r\n    const [currentColor, setColor] = useState({\r\n        color: '', code: ''\r\n    });\r\n\r\n    const colors = [\r\n        {color: 'Soft pink', code: '#ce6991'},\r\n        {color: 'Blue', code: '#5e76c4'},\r\n        {color: 'Orange', code: '#ffb432'},\r\n        {color: 'Green', code: '#69d452'},\r\n        {color: 'Purple', code: '#b721d0'},\r\n    ];\r\n\r\n    function changeColorBackground(color) {\r\n        setColor(color)\r\n    }\r\n\r\n    return (\r\n        <div className=\"p-1\">\r\n            <h4 className=\"mt-1 ml-1\">Сменить фон: </h4>\r\n            <div className=\"input-group\">\r\n                <input type=\"text\" className=\"form-control\"\r\n                       value={url}\r\n                       onChange={event => setUrl(event.target.value)}\r\n                       aria-describedby=\"backgroundInput\"/>\r\n                <div className=\"input-group-append\">\r\n                    <button className=\"btn btn-secondary\"\r\n                            onClick={() => props.changeBackground(url)}\r\n                            type=\"button\" id=\"button-addon2\">Load</button>\r\n                </div>\r\n            </div>\r\n            <h4 className=\"mt-1 ml-1\">или выберите цвет: </h4>\r\n            <div style={{display: 'flex', flexDirection: 'row', flexWrap: 'wrap'}}>\r\n                {\r\n                    colors.map(color =>\r\n                        <div key={color.code}\r\n                             onClick={() => {\r\n                                 setColor(color);\r\n                                 props.changeBackground(color)}}\r\n                             className={currentColor.code === color.code ?\r\n                                 'active-color-card color-card' : 'color-card'}\r\n                             style={{background: color.code}}/>)\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport ChangeBackground from \"./ChangeBackground\";\r\n\r\nexport default function ChangeSettings(props) {\r\n    return (\r\n        <>\r\n            <button type=\"button\" onClick={() => props.changeSettingsOpen()}\r\n                    className=\"btn btn-sm m-1 position-absolute close-settings-btn\">\r\n                <svg width=\"1.5em\" height=\"1.5em\" viewBox=\"0 0 16 16\"\r\n                     className=\"bi bi-x svg-close-settings-btn\" fill=\"currentColor\"\r\n                     xmlns=\"http://www.w3.org/2000/svg\">\r\n                    <path fill-rule=\"evenodd\"\r\n                          d=\"M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z\"/>\r\n                </svg>\r\n            </button>\r\n            <div className=\"mt-4\">\r\n                <ChangeBackground\r\n                    changeBackground={props.changeBackground}/>\r\n            </div>\r\n        </>\r\n    );\r\n}","import { openDB } from 'idb';\r\n\r\nexport const dbPromise = openDB('store', 6, {\r\n    upgrade(db) {\r\n        if (!db.objectStoreNames.contains('settings')) {\r\n            let dirs = db.createObjectStore('settings',\r\n                {keyPath: 'name', autoIncrement: false});\r\n            dirs.createIndex('value', 'value', {unique: false});\r\n        }\r\n        if (!db.objectStoreNames.contains('dirs')) {\r\n            let dirs = db.createObjectStore('dirs',\r\n                {keyPath: 'id', autoIncrement: true});\r\n            dirs.createIndex('title', 'title', {unique: false});\r\n            dirs.createIndex('order', 'order', {unique: false});\r\n        }\r\n        if (!db.objectStoreNames.contains('todos')) {\r\n            let todos = db.createObjectStore('todos',\r\n                {keyPath: 'id', autoIncrement: true});\r\n            todos.createIndex('title', 'title', {unique: false});\r\n            todos.createIndex('describe', 'describe', {unique: false});\r\n            todos.createIndex('data', 'data', {unique: false});\r\n            todos.createIndex('dir_id', 'dir_id', {unique: false});\r\n            todos.createIndex('order', 'order', {unique: false});\r\n        }\r\n    },\r\n});\r\n\r\nexport const idbKeyval = {\r\n    async get(table, key) {\r\n        return (await dbPromise).get(table, key);\r\n    },\r\n    async getAll(table) {\r\n        return (await dbPromise).getAll(table);\r\n    },\r\n    async add(table,val) {\r\n        return (await dbPromise).add(table, val);\r\n    },\r\n    async set(table, val) {\r\n        return (await dbPromise).put(table, val);\r\n    },\r\n    async delete(table,key) {\r\n        return (await dbPromise).delete(table, key);\r\n    },\r\n    async clear(table) {\r\n        return (await dbPromise).clear(table);\r\n    },\r\n    async keys(table) {\r\n        return (await dbPromise).getAllKeys(table);\r\n    },\r\n};","import React, {useEffect, useState} from \"react\";\r\nimport {idbKeyval} from '../DBActions';\r\n\r\nexport default function TitleWithInput(props) {\r\n    const [openInput, setOpenInput] = useState(false);\r\n    const [title, setTitle] = useState(props.obj.title);\r\n\r\n    function handleInputKeyUp(event) {\r\n        if (event.key === 'Enter') {\r\n            changeTitle();\r\n        }\r\n    }\r\n\r\n    function changeTitle() {\r\n        props.obj.title = title;\r\n        idbKeyval.set(props.table, props.obj).then(() => {\r\n            setOpenInput(false);\r\n            idbKeyval.get(props.table, props.obj.id).then(obj => {\r\n                setTitle(obj.title);\r\n            })\r\n        });\r\n    }\r\n\r\n    function deleteObj() {\r\n        props.deleteObj(props.obj.id);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (document.getElementById(props.id))\r\n            document.getElementById(props.id).focus();\r\n    });\r\n\r\n    function openInputAndFocus() {\r\n        setOpenInput(true);\r\n    }\r\n\r\n    function blurInputAndSave() {\r\n        setOpenInput(false);\r\n        changeTitle();\r\n    }\r\n\r\n    function onDragStart(event, obj) {\r\n        event.dataTransfer.setData('obj', obj.id);\r\n    }\r\n\r\n    return (\r\n        <div className={props.table === 'todos' ? 'todo-card p-1 m-1 draggable' : 'dir-title p-1'}\r\n             id={'div/' + props.id}\r\n             onDragStart={(event) => onDragStart(event, props.obj)}\r\n             draggable={props.table === 'todos'}>\r\n            {\r\n                openInput ?\r\n                    <input id={props.id} type=\"text\"\r\n                           className=\"form-control title-input\"\r\n                           onBlur={() => blurInputAndSave()}\r\n                           onKeyUp={event => handleInputKeyUp(event)}\r\n                           onChange={event => setTitle(event.target.value)}\r\n                           value={title}/>\r\n                    :\r\n                    <div className=\"title-span\" id={'title-span' + props.id}\r\n                         onClick={() => openInputAndFocus()}>{title}</div>\r\n            }\r\n            <div className=\"spacer\"/>\r\n            <button type=\"button\"\r\n                    onClick={() => deleteObj()}\r\n                    className=\"delete-button btn\">\r\n                <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" className=\"bi bi-x\" fill=\"currentColor\"\r\n                     xmlns=\"http://www.w3.org/2000/svg\">\r\n                    <path d=\"M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z\"/>\r\n                </svg>\r\n            </button>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport TitleWithInput from \"./TitleWithInput\";\r\n\r\nexport default function Directories(props) {\r\n    return (\r\n        <>\r\n            {\r\n                props.dirs.length !== 0 &&\r\n                props.dirs.map(dir =>\r\n                    <div key={dir.dir.id} className=\"directory-card p-2 m-2 droppable\"\r\n                         onDrop={event => props.onDrop(event, dir)}\r\n                         onDragOver={event => props.onDragOver(event)}>\r\n                        <TitleWithInput table=\"dirs\" deleteObj={props.deleteDir}\r\n                                        obj={dir.dir} id={'dirs' + dir.dir.id}/>\r\n                        <div className=\"todos-scroll\">\r\n                            {\r\n                                dir.todos.map(todo =>\r\n                                    <TitleWithInput table=\"todos\"\r\n                                                    deleteObj={props.deleteTodo}\r\n                                                    key={'todo' + todo.id}\r\n                                                    obj={todo}\r\n                                                    id={'todos/dir' + dir.dir.id + '/todo:' + todo.id}/>\r\n                                )\r\n                            }\r\n                        </div>\r\n                        <button type=\"button\"\r\n                                className=\"btn btn-outline-primary m-1\"\r\n                                onClick={() => props.addNewTODO(dir)}>Добавить\r\n                        </button>\r\n                    </div>\r\n                )\r\n            }\r\n        </>\r\n    )\r\n}","import React from \"react\";\nimport ChangeSettings from './Settings/ChangeSettings'\nimport {dbPromise, idbKeyval} from './DBActions';\nimport Directories from \"./Directories/Directories\";\n\nclass App extends React.Component  {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isOpenSettings: false,\n            db: dbPromise,\n            dirs: [],\n            background_url: '',\n            background_color: ''\n        };\n\n        this.changeBackground = this.changeBackground.bind(this);\n        this.addNewTODO= this.addNewTODO.bind(this);\n        this.deleteDir = this.deleteDir.bind(this);\n        this.deleteToDo = this.deleteToDo.bind(this);\n        this.clear = this.clear.bind(this);\n        this.onDrop = this.onDrop.bind(this);\n    }\n\n    componentDidMount() {\n        this.updateDirs();\n        idbKeyval.getAll('settings').then(settings => {\n            for (let item of settings) {\n                if (item.name === 'url') {\n                    this.setState({\n                        background_url: item.value,\n                        background_color: ''\n                    }, () => {\n                        this.changeStyleRoot();\n                    })\n                }\n                if (item.name === 'color')\n                    this.setState({\n                        background_url: '',\n                        background_color: item.value\n                    }, () => {\n                        this.changeStyleRoot();\n                    })\n            }\n        });\n    }\n\n    updateDirs() {\n        idbKeyval.getAll('dirs').then(dirs => {\n            idbKeyval.getAll('todos').then(todos => {\n                let res = [];\n                for (let dir of dirs) {\n                    res.push({\n                        dir: dir,\n                        todos: todos.filter(x =>\n                            x.dir_id === dir.id).sort((a,b) => a.order - b.order)\n                    })\n                }\n                res.sort((a,b) => a.order - b.order);\n                this.setState({dirs: res});\n            })\n        });\n    }\n\n    addNewDir() {\n        idbKeyval.add('dirs', {\n            title: 'New list',\n            order: this.state.dirs.length\n        })\n            .then(() => this.updateDirs());\n    }\n\n    addNewTODO(dir) {\n        idbKeyval.add('todos', {\n            title: 'New todo',\n            describe: 'new',\n            data: new Date().toISOString(),\n            dir_id: dir.dir.id,\n            order: dir.todos.length\n        }).then(() => this.updateDirs());\n    }\n\n    deleteDir(key) {\n        idbKeyval.delete('dirs', key)\n            .then(() => this.updateDirs());\n    }\n\n    deleteToDo(key) {\n        idbKeyval.delete('todos', key)\n            .then(() => this.updateDirs());\n    }\n\n    async clear() {\n        idbKeyval.clear('todos').then(() =>\n            idbKeyval.clear('dirs').then(() => this.updateDirs()));\n    }\n\n    setNewSettingsPanelPosition() {\n        this.setState(state => ({\n            isOpenSettings: !state.isOpenSettings\n        }), () => {\n            if (this.state.isOpenSettings) {\n                const settingsPanel = document.getElementById('settings');\n                settingsPanel.style.animation = 'open-settings-panel 1s';\n            }\n        })\n    }\n\n    changeSettingsOpenState() {\n        if (this.state.isOpenSettings) {\n            const settingsPanel = document.getElementById('settings');\n            settingsPanel.style.animation = 'close-settings-panel 1s';\n            setTimeout(() => this.setNewSettingsPanelPosition(), 1000);\n        }\n        else this.setNewSettingsPanelPosition();\n    }\n\n    changeStyleRoot() {\n        const root = document.getElementById('root');\n        root.style.backgroundImage = 'none';\n        root.style.background = 'transparent';\n        if (this.state.background_color) {\n            root.style.background = this.state.background_color;\n        }\n        if (this.state.background_url) {\n            root.style.backgroundImage = `url(${this.state.background_url})`;\n        }\n    }\n\n    changeBackground(new_url) {\n        idbKeyval.delete('settings', 'url');\n        idbKeyval.delete('settings', 'color');\n        if (new_url instanceof Object) {\n            this.setState({\n                background_url: '',\n                background_color: new_url.code\n            })\n            idbKeyval.add('settings', {\n                name: 'color',\n                value: new_url.code\n            }).then(() => this.changeStyleRoot());\n        }\n        else {\n            this.setState({background_url: new_url});\n            idbKeyval.add('settings', {\n                name: 'url',\n                value: new_url\n            }).then(() => this.changeStyleRoot());\n            this.changeSettingsOpenState();\n        }\n    }\n\n    onDragOver(event) {\n        event.preventDefault();\n    }\n\n    onDrop(event, dir) {\n        const id = +event.dataTransfer.getData('obj');\n        idbKeyval.get('todos', id).then(todo => {\n            if (todo.dir_id !== dir.dir.id) {\n                todo.dir_id = dir.dir.id;\n                todo.order = dir.todos.length;\n                idbKeyval.set('todos', todo)\n                    .then(() => this.updateDirs());\n            }\n            else {\n                const target_id = event.target.id;\n                if (target_id) {\n                    let new_id = +target_id.split(':')[1];\n                    if (new_id !== id) {\n                        idbKeyval.get('todos', new_id)\n                            .then(new_todo => {\n                                let order = 0;\n                                todo.order = new_todo.order + 1;\n                                dir.todos.find(x => x.id === todo.id).order = new_todo.order + 1;\n                                dir.todos = dir.todos.sort((a,b) => {\n                                    if (a.order < b.order) {\n                                        return -1;\n                                    }\n                                    if (a.order > b.order) {\n                                        return 1;\n                                    }\n                                    if (a.order === b.order) {\n                                        if (a.id === todo.id)\n                                            return -1;\n                                        else return 1;\n                                    }\n\n                                    return 0;\n                                });\n                                let promises = [];\n                                for (let val of dir.todos) {\n                                    val.order = order;\n                                    promises.push(idbKeyval.set('todos', val));\n                                    order++;\n                                }\n                                Promise.all(\n                                    promises\n                                )\n                                    .then(() => this.updateDirs());\n                            })\n                    }\n                }\n            }\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"container-xl\">\n                <>\n                    {\n                        this.state.isOpenSettings &&\n                        <div id=\"settings\" className=\"settings-panel position-absolute\">\n                            <ChangeSettings\n                                changeBackground={this.changeBackground}\n                                changeSettingsOpen={() => this.changeSettingsOpenState()}/>\n                        </div>\n                    }\n                    <div>\n                        <div className=\"row\">\n                            <button type=\"button\"\n                                    className=\"btn btn-outline-primary m-2\"\n                                    onClick={() => this.addNewDir()}>Новый список</button>\n                            <button type=\"button\"\n                                    className=\"btn btn-outline-primary m-2\"\n                                    onClick={() => this.clear()}>Очистить все</button>\n                            <div className=\"spacer\"/>\n                            <button type=\"button\" onClick={() => this.changeSettingsOpenState()}\n                                    className=\"btn btn-outline-primary m-2\">\n                                <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" className=\"bi bi-toggles\">\n                                    <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" className=\"bi bi-toggles\"\n                                         fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n                                        <path d=\"M4.5 9a3.5 3.5 0 1 0 0 7h7a3.5 3.5 0 1 0 0-7h-7zm7 6a2.5 2.5 0 1 0 0-5 2.5 2.5 0 0 0 0 5zm-7-14a2.5 2.5 0 1 0 0 5 2.5 2.5 0 0 0 0-5zm2.45 0A3.49 3.49 0 0 1 8 3.5 3.49 3.49 0 0 1 6.95 6h4.55a2.5 2.5 0 0 0 0-5H6.95zM4.5 0h7a3.5 3.5 0 1 1 0 7h-7a3.5 3.5 0 1 1 0-7z\"/>\n                                    </svg>\n                                </svg>\n                            </button>\n                        </div>\n                        <div className=\"row directories-scroll\">\n                            <Directories\n                                onDrop={this.onDrop}\n                                onDragOver={this.onDragOver}\n                                deleteDir={this.deleteDir}\n                                deleteTodo={this.deleteToDo}\n                                addNewTODO={this.addNewTODO}\n                                clear={this.clear}\n                                dirs={this.state.dirs}/>\n                        </div>\n                    </div>\n                </>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\r\n\r\nexport default class ErrorBoundary extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { error: null, errorInfo: null };\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        // Catch errors in any components below and re-render with error message\r\n        this.setState({\r\n            error: error,\r\n            errorInfo: errorInfo\r\n        })\r\n        // You can also log error messages to an error reporting service here\r\n    }\r\n\r\n    render() {\r\n        if (this.state.errorInfo) {\r\n            // Error path\r\n            return (\r\n                <div>\r\n                    <h2>Something went wrong.</h2>\r\n                    <details style={{ whiteSpace: 'pre-wrap' }}>\r\n                        {this.state.error && this.state.error.toString()}\r\n                        <br />\r\n                        {this.state.errorInfo.componentStack}\r\n                    </details>\r\n                </div>\r\n            );\r\n        }\r\n        // Normally, just render children\r\n        return this.props.children;\r\n    }\r\n}","import './custom.scss';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport ErrorBoundary from './ErrorBoundary';\n\nReactDOM.render(\n    <React.StrictMode>\n        <ErrorBoundary>\n            <App />\n        </ErrorBoundary>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n"],"sourceRoot":""}